{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","shortid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a4bcc7c.chunk.js","sourcesContent":["import React, { Fragment, useState }from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({crearCita}) => {\n\n// Crear State de Citas\nconst [cita, actualizarCita] = useState({\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n});\nconst [ error, actualizarError ] = useState(false)\n\n    //Funcion que se ejecuta cada que el usuario escribe en el input\n    const actualizarState = e => {\n        actualizarCita ({\n            ...cita,\n            [e.target.name]: e.target.value\n        })\n    }\n\n        //Extraer valores\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\n        \n        //Cuando el usuario presiona aregar cita\n    const submitCita = e => {\n        e.preventDefault();\n\n        //Validar\n        if \n            (\n                mascota.trim() === '' ||\n                propietario.trim() === '' ||\n                fecha.trim() === ''  ||\n                hora.trim() === ''  ||\n                sintomas.trim() === ''\n            ) {\n                actualizarError(true);\n                return;\n            }\n    // Eliminar mensaje previo\n    actualizarError(false);\n        \n        //Asignar una ID\n        cita.id = shortid();\n        \n    //Crear la cita\n        crearCita(cita);\n\n        //Reiniciar el form\n        actualizarCita({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n        })\n    }   \n    \n    return (\n        <Fragment>\n            <h2>Crear Cita</h2>\n\n            { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> :null}\n\n            <form\n                onSubmit={submitCita}\n            >\n                <label>Nombre Mascota</label>\n                <input\n                    type=\"text\"\n                    name=\"mascota\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Mascota\"\n                    onChange={actualizarState}\n                    value={mascota}\n                />    \n\n                <label>Nombre Dueño</label>\n                <input\n                    type=\"text\"\n                    name=\"propietario\"\n                    className=\"u-full-width\"\n                    placeholder=\"Nombre Dueño de la Mascota\"\n                    onChange={actualizarState}\n                    value={propietario}\n                    />\n                    \n                <label>Fecha</label>\n                <input\n                    type=\"date\"\n                    name=\"fecha\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={fecha}\n                />\n\n                <label>Hora</label>\n                <input\n                    type=\"time\"\n                    name=\"hora\"\n                    className=\"u-full-width\"\n                    onChange={actualizarState}\n                    value={hora}\n                />\n\n                <label>Sintomas</label>\n                <textarea\n                    className=\"u-full-width\"\n                    name=\"sintomas\"\n                    onChange={actualizarState}\n                    value={sintomas}\n                ></textarea>\n                <button\n                    type=\"submit\"\n                    className=\"u-full-width button-primary\"\n                >Agregar Cita</button>\n\n            </form> \n        </Fragment>\n      );\n}\n \nFormulario.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\n\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Cita = ({cita, eliminarCita}) => (\n    <div className=\"cita\">\n        <p>Mascota: <span>{cita.mascota}</span></p>\n        <p>Dueño: <span>{cita.propietario}</span></p>\n        <p>Fecha: <span>{cita.fecha}</span></p>\n        <p>Hora: <span>{cita.hora}</span></p>\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\n\n        <button\n            className=\"button eliminar u-full-width\"\n            onClick={ () => eliminarCita (cita.id)}\n        >Eliminar &times;</button>\n    </div>\n);\n \nCita.propTypes = {\n    cita: PropTypes.object.isRequired,\n    eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\n\nfunction App() {\n\n   \n  // Citas en local storage \n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n\n  // Arreglo de Citas\n  const [citas, guardarCitas] = useState([citasIniciales]);\n\n  //Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect( () => {\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas, citasIniciales] );\n\n  // Funcion que tome las citas actuales y agregue la nueva\n  const crearCita = cita => {\n    guardarCitas([...citas, cita]);\n  }\n  //Funcion que elimina una cita por su id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id );\n    guardarCitas(nuevasCitas);\n  }\n  //Mensaje condicional\n    const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas';\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n              <Formulario\n              crearCita={crearCita}\n              />\n          </div>\n          <div className=\"one-half column\">\n              <h2>{titulo}</h2>\n              {citas.map(cita => (\n                <Cita\n                  key={cita.id}\n                  cita={cita}\n                  eliminarCita={eliminarCita}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    </Fragment> \n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}